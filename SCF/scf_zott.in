import time
import numpy as np
np.set_printoptions(precision=5, linewidth=200, suppress=True)

# Memory for Psi4 in GB
memory 2 GB

# Memory for numpy in GB
numpy_memory = 2

molecule mol {
O
H 1 1.1
H 1 1.1 2 104
symmetry c1
}

# Need to give a orbital basis and df_basis_scf which is used for the DF tensor
set {
basis cc-pVDZ
df_basis_scf cc-pVDZ-jkfit
e_convergence 1e-8
}

#scf_type can be either 'df' or 'diis'
scf_type = 'diis'

# Set defaults
maxiter = 20
E_conv = 1.0E-8
D_conv = 1.0E-4

# Integral generation from Psi4's MintsHelper
wfn = psi4.new_wavefunction(mol, psi4.get_global_option('BASIS'))
t = time.time()
mints = MintsHelper(wfn.basisset())
S = np.asarray(mints.ao_overlap())

# Get nbf and ndocc for closed shell molecules
nbf = S.shape[0]
ndocc = wfn.nalpha()

print('\nNumber of occupied orbitals: %d' % ndocc)
print('Number of basis functions: %d' % nbf)

# Run a quick check to make sure everything will fit into memory
I_Size = (nbf ** 4) * 8.e-9
print("\nSize of the ERI tensor will be %4.2f GB." % I_Size)

# Estimate memory usage
memory_footprint = I_Size * 1.5
if I_Size > numpy_memory:
    clean()
    raise Exception("Estimated memory utilization (%4.2f GB) exceeds numpy_memory \
                    limit of %4.2f GB." % (memory_footprint, numpy_memory))

# Compute required quantities for SCF
V = np.asarray(mints.ao_potential())
T = np.asarray(mints.ao_kinetic())

if scf_type == 'df' or scf_type == 'diis': 
    # This is a slight hack of Psi4, it was never ment to do this.
    scf_e, scf_wfn = energy('SCF', return_wfn=True)
    dfobj = DFTensor(scf_wfn, "DF_BASIS_SCF") 
    Qpq = np.asarray(dfobj.Qso())  # Equation 28

# Build the density fitted version
if scf_type == 'diis':
    Idf = np.einsum('Qpq,Qrs->pqrs', Qpq, Qpq)

if scf_type == 'scf': # or scf_type == 'diis':
    #Build the conventional version
    # Remember: Stop building this and use the DF tensor, this is just for a demonstration
    I = np.asarray(mints.ao_eri())
    print("\nThe norm between the g and density-fitted g tensor is %10.4f" % np.linalg.norm(Idf - I))
    print('\nTotal time taken for integrals: %.3f seconds.' % (time.time() - t))

t = time.time()

# Build H_core
H = T + V

# Orthogonalizer A = S^(-1/2)
A = mints.ao_overlap()
A.power(-0.5, 1.e-14)
A = np.asarray(A)

# Calculate initial core guess
Hp = A.dot(H).dot(A)
e, C2 = np.linalg.eigh(Hp)
C = A.dot(C2)
Cocc = C[:, :ndocc]
D = np.einsum('pi,qi->pq', Cocc, Cocc)

print('\nTotal time taken for setup: %.3f seconds' % (time.time() - t))

print('\nStart SCF iterations:\n')
t = time.time()
E = 0.0
Enuc = mol.nuclear_repulsion_energy()
Eold = 0.0

if scf_type == 'diis' or scf_type == 'df':
    Fock_list = []
    DIIS_error = []

for SCF_ITER in range(1, maxiter + 1):

    if scf_type == 'df':
        # Build Density fitted elements
        #Xp = np.einsum('qrs,rs->q', Qpq, D)
        Xp = np.dot(Qpq.reshape(Qpq.shape[0], -1), D.reshape(-1))
    
        #Zpqr = np.einsum('pqs,rs->pqr', Qpq, D)
        Z1 = np.dot(Qpq.reshape(Qpq.shape[0] * Qpq.shape[1], -1), Cocc).reshape(Qpq.shape[0], Qpq.shape[1], -1)     
        J = np.dot(Qpq.reshape(Qpq.shape[0], -1).T, Xp).reshape(S.shape[0],-1)
        K  = np.dot(np.transpose(Z1, (1, 0, 2)).reshape(Z1.shape[1], -1), np.transpose(Z1, (0, 2, 1)).reshape(-1, Z1.shape[1]))

    # Build fock matrix
    if scf_type == 'scf' or scf_type == 'diis':
        Xp = np.einsum('qrs,rs->q', Qpq, D)
        Zpqr = np.einsum('pqs,rs->pqr', Qpq, D)
        J = np.einsum('Ppq,P->pq', Qpq, Xp)
        K = np.einsum('Ppr,Pqr->pq', Qpq, Zpqr)

    # Now this will be like 'Prp, Prq', so collapse Pr into one dimension
    #K = np.dot(np.transpose(Qpq, (0,2,1)).reshape(Qpq.shape[0] * Qpq.shape[1], -1).T,
    #           np.transpose(Zpqr, (0,2,1)).reshape(Zpqr.shape[0] * Zpqr.shape[1], -1))
    #
    #K = np.einsum('Pup, Pvp', Z1, Z1)
    #print np.allclose(K1, K)

    F = H + J * 2 - K
    # DIIS error build
    if scf_type == 'diis' or scf_type == 'df':
        diis_e = A.T.dot(F.dot(D).dot(S) - S.dot(D).dot(F)).dot(A)
        Fock_list.append(F)
        DIIS_error.append(diis_e)

    # SCF energy and update
    SCF_E = np.einsum('pq,pq->', F + H, D) + Enuc
    dRMS = np.mean(diis_e ** 2) ** 0.5

    print('SCF Iteration %3d: Energy = %4.16f   dE = % 1.5E   dRMS = %1.5E'
          % (SCF_ITER, SCF_E, (SCF_E - Eold), dRMS))
    if (abs(SCF_E - Eold) < E_conv) and (dRMS < D_conv):
        break

    Eold = SCF_E

    if scf_type == 'diis' or scf_type == 'df':
        if len(Fock_list) > 8:
            del Fock_list[0]
            del DIIS_error[0]

        # Build B
        size_b = len(Fock_list) + 1
        B = np.zeros((size_b, size_b))
        B[-1] = -1
        B[:, -1] = -1
        B[-1, -1] = 0
        for i in range(size_b - 1):
            for j in range(i, size_b - 1):
                B[i, j] = B[j, i] = np.sum(DIIS_error[i] * DIIS_error[j])

        # Build RHS    
        rhs = np.zeros((size_b))
        rhs[-1] = -1
        ci = np.linalg.solve(B, rhs)

        # Build s_i+1 Fock matrix
        Fdiis = np.zeros_like(F)
        for cx in range(ci.shape[0] - 1):
            Fdiis += ci[cx] * Fock_list[cx]

        # Diagonalize Fock matrix
        Fp = A.dot(Fdiis).dot(A)
        e, C2 = np.linalg.eigh(Fp)
        C = A.dot(C2)
        Cocc = C[:, :ndocc]
        D = np.einsum('pi,qi->pq', Cocc, Cocc)

    if SCF_ITER == maxiter:
        clean()
        raise Exception("Maximum number of SCF cycles exceeded.")

print('Total time for SCF iterations: %.3f seconds \n' % (time.time() - t))

print('Final SCF energy: %.8f hartree' % SCF_E)
SCF_E_psi = energy('SCF')
compare_values(SCF_E_psi, SCF_E, 6, 'SCF Energy')
