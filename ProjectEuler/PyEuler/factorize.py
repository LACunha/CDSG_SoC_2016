"""Module containing function to decompose a number into its prime factor"""
import os,sys
sys.path.append('../')
from PyEuler import primes as pr
import numpy as np

def factorize(number,prime_list):
	"""Returns a list of the prime factors (repeatead or not) of *number*
	Arguments:
	- integer *number* to be factorized
	- array *prime_list* with the primes generated by sieve_erat
	Returns: list of all prime factor of *number*"""

	#List of factors
	factors = np.array([])
	quociente = number
	while (quociente != 1):
		for prime in prime_list:
			if (quociente%prime==0):
				quociente = quociente/prime
				factors = np.append(factors,int(prime))
				break;
	return factors

def multiplicity(factors):
        """Returns a list of the multiplicity of each prime factor contained in the list *factors*
        Arguments: list *factors* of prime factors of a number
        Returns: list of the multiplicity (how many times it appears) of each prime factor*"""
	multi = np.array([])
	pos = 1
	count_prime = 1   
	while pos<np.size(factors):
		if(factors[pos]==factors[pos-1]):
			count_prime+=1
		else:
			multi = np.append(multi,count_prime)
			count_prime = 1
		pos+=1
	multi = np.append(multi,count_prime)
	return multi

def number_divisors(multi_list):
	"""Returns the number of divisors given the mutliplicity of prime factors *multi_list*
        Arguments:
        - List of multiplicity of prime factors *multi_list*
        Returns: number of divisors of a number the multiplicty of prime factors given by *multi_list*"""
	divisor = 1
	for m in multi_list:
		divisor*=(m+1)
	return divisor

